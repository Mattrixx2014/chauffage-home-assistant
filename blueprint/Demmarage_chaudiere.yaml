blueprint:
  name: Activation simultanée par seuils de pourcentage (optimisée)
  description: >-
    Active un switch en vérifiant simultanément toutes les conditions à intervalles réguliers.
    Optimisée pour éviter les répétitions de code.
  domain: automation
  input:
    input_numbers:
      name: Entrées en pourcentage
      description: Liste des entrées de type input_number (en pourcentage) à surveiller.
      selector:
        entity:
          domain: input_number
          multiple: true
    target_switch:
      name: Switch à activer
      description: Switch à activer si les conditions sont remplies.
      selector:
        entity:
          domain: input_boolean
    durations:
      name: Entités de stockage des durées
      description: Associer chaque seuil avec son entité compteur.
      default:
        "25": ""
        "33": ""
        "66": ""
        "100": ""
      selector:
        object:

trigger:
  - platform: time_pattern
    minutes: "/5"  # toutes les 5 minutes

variables:
  input_numbers: !input input_numbers
  target_switch: !input target_switch
  durations: !input durations

  # On calcule toutes les valeurs d’entrée
  input_values: >-
    {% set values = [] %}
    {% for entity in input_numbers %}
      {% if states(entity) not in ['unknown', 'unavailable'] %}
        {% set values = values + [states(entity) | float(0)] %}
      {% endif %}
    {% endfor %}
    {{ values }}

  # On calcule combien dépassent chaque seuil
  counts: >-
    {% set thresholds = [25, 33, 66, 100] %}
    {% set ns = namespace(data={}) %}
    {% for t in thresholds %}
      {% set c = input_values | select('>=', t) | list | count %}
      {% set ns.data = dict(ns.data, **{t: c}) %}
    {% endfor %}
    {{ ns.data }}

action:
  - alias: Mise à jour des compteurs de durée
    repeat:
      for_each: "{{ durations | dict2items }}"
      sequence:
        - variables:
            seuil: "{{ repeat.item.key | int }}"
            entity: "{{ repeat.item.value }}"
            count: "{{ counts[seuil] if seuil in counts else 0 }}"
        - choose:
            - conditions: "{{ entity != '' }}"
              sequence:
                - service: input_number.set_value
                  target:
                    entity_id: "{{ entity }}"
                  data:
                    value: >-
                      {% set current = states(entity) | int(0) %}
                      {% if (seuil == 25 and count >= 4)
                            or (seuil == 33 and count >= 3)
                            or (seuil == 66 and count >= 2)
                            or (seuil == 100 and count >= 1) %}
                        {{ current + 1 }}
                      {% else %}
                        0
                      {% endif %}

  - alias: Activation du switch
    if:
      - condition: or
        conditions:
          - "{{ durations['25'] != '' and states(durations['25']) | int >= 5 }}"
          - "{{ durations['25'] != '' and states(durations['25']) | int >= 10 }}"
          - "{{ durations['25'] != '' and states(durations['25']) | int >= 15 }}"
          - "{{ durations['25'] != '' and states(durations['25']) | int >= 20 }}"
    then:
      - service: input_boolean.turn_on
        target:
          entity_id: "{{ target_switch }}"
    else:
      - service: input_boolean.turn_off
        target:
          entity_id: "{{ target_switch }}"

mode: single
