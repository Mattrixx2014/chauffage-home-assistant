blueprint:
  name: Activation simultanée par seuils de pourcentage (optimisée)
  description: >-
    Active un switch en vérifiant simultanément toutes les conditions à intervalles réguliers.
    Optimisée pour éviter les répétitions de code.
  domain: automation
  input:
    input_numbers:
      name: Entrées en pourcentage
      description: Liste des entrées de type input_number (en pourcentage) à surveiller.
      selector:
        entity:
          domain: input_number
          multiple: true
    target_switch:
      name: Switch à activer
      description: Switch à activer si les conditions sont remplies.
      selector:
        entity:
          domain: input_boolean
    thresholds:
      name: Seuils et compteurs
      description: Liste des seuils et des entités compteurs associées
      default:
        - seuil: 25
          min_count: 4
          entity: ""
        - seuil: 33
          min_count: 3
          entity: ""
        - seuil: 66
          min_count: 2
          entity: ""
        - seuil: 100
          min_count: 1
          entity: ""
      selector:
        object:

trigger:
  - platform: time_pattern
    minutes: "/5"  # toutes les 5 minutes

variables:
  input_numbers: !input input_numbers
  target_switch: !input target_switch
  thresholds: !input thresholds

  # On calcule toutes les valeurs d’entrée
  input_values: >-
    {% set values = [] %}
    {% for entity in input_numbers %}
      {% if states(entity) not in ['unknown', 'unavailable'] %}
        {% set values = values + [states(entity) | float(0)] %}
      {% endif %}
    {% endfor %}
    {{ values }}

  # On calcule combien dépassent chaque seuil
  counts: >-
    {% set ns = namespace(data=[]) %}
    {% for t in thresholds %}
      {% set seuil = t.seuil | int %}
      {% set c = input_values | select('>=', seuil) | list | count %}
      {% set ns.data = ns.data + [{ "seuil": seuil, "count": c }] %}
    {% endfor %}
    {{ ns.data }}

action:
  - alias: Mise à jour des compteurs de durée
    repeat:
      for_each: "{{ thresholds }}"
      sequence:
        - variables:
            seuil: "{{ repeat.item.seuil | int }}"
            min_count: "{{ repeat.item.min_count | int }}"
            entity: "{{ repeat.item.entity }}"
            count: >-
              {% set c = counts | selectattr('seuil','eq',repeat.item.seuil | int) | map(attribute='count') | first %}
              {{ c if c is not none else 0 }}
        - choose:
            - conditions: "{{ entity != '' }}"
              sequence:
                - service: input_number.set_value
                  target:
                    entity_id: "{{ entity }}"
                  data:
                    value: >-
                      {% set current = states(entity) | int(0) %}
                      {% if count >= min_count %}
                        {{ current + 1 }}
                      {% else %}
                        0
                      {% endif %}

  - alias: Activation du switch
    if:
      - condition: template
        value_template: >-
          {% set entity_25 = (thresholds | selectattr('seuil','eq',25) | map(attribute='entity') | first) %}
          {% if entity_25 %}
            {{ states(entity_25) | int in [5,10,15,20] }}
          {% else %}
            false
          {% endif %}
    then:
      - service: input_boolean.turn_on
        target:
          entity_id: "{{ target_switch }}"
    else:
      - service: input_boolean.turn_off
        target:
          entity_id: "{{ target_switch }}"

mode: single
